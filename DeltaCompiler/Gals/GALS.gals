#Options
GenerateScanner = true
GenerateParser = true
Language = C++
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = SLR
#RegularDefinitions
LS : [^\"]|(\\\")
LC : [^']|(\\')
D : [0-9]

DEC : [0-9]+
HEX : 0[xX][0-9a-fA-F]+
BIN : 0[bB][01]+

CMT: (/\*([^\*]|[\r\n]|(\*+([^\*/]|[\r\n])))*\*+/)|([/][/].*)
#Tokens
INT_DEC : {DEC}
INT_HEX : {HEX}
INT_BIN : {BIN}
FLOAT : {D}+(\.{D}+)?f?
STRING : \"{LS}*\"
CHAR : '{LC}?'
BOOLEAN : (true|false)

VAR_INT: int
VAR_FLOAT: float
VAR_DOUBLE: double
VAR_STRING: string
VAR_CHAR: char
VAR_BOOLEAN: boolean
VAR_VOID: void

CONST : const
REF: ref
IF : if
ELSE : else
ELSEIF : elseif
WHILE : while
DO: do
FOR : for
WHEN : when
IS : is
RETURN : return
DEFAULT : default
PRINT : print
INPUT : input

AND : (and|&&)
OR : (or|\|\|)
NOT : (not|!)

GREATER: >
SMALLER: <
GREATER_EQ: >=
SMALLER_EQ: <=
EQ: ==
DIF: !=

INCREMENT_ASSIGNMENT: \+=
DECREMENT_ASSIGNMENT: \-=
MULTIPLICATION_ASSIGNMENT: \*=
DIVSION_ASSIGNMENT: /=
MOD_ASSIGNMENT: %=
BIT_OR_ASSIGNMENT: \|=
BIT_XOR_ASSIGNMENT: \^=
BIT_AND_ASSIGNMENT: &=
BIT_LS_ASSIGNMENT: <<=
BIT_RS_ASSIGNMENT: >>=

INCREMENT: \+\+
DECREMENT: \-\-
PLUS: \+
MINUS: \-
MULT: \*
DIV: /
MOD: %
ASSIGNMENT: =

BIT_AND: &
BIT_OR: \|
BIT_XOR: \^
BIT_NOT: ~
BIT_LS: <<
BIT_RS: >>

LSP : \(
RSP : \)
LSB : \[ 
RSB : \]
LSC : \{
RSC : \}
DOT : \.
END : ;
COLON : :
COMMA : ,

ID : [a-zA-Z_$][a-zA-Z_0-9$]*

: {CMT}
: [\s\t\n\r ]*


#NonTerminals
// Global scope
<global>
<global_stmt>

// Scopes and functions
<scope>
<function>
<function_prototype>
<function_prototype_argument_list>

<function_call>
<function_call_argument_list>

// Statements
<statement_list>
<statement>

<if_stmt>
<while_stmt>
<do_while_stmt>

<for_stmt>
<for_left>

<when_stmt>

<declaration_stmt>
<declaration_stmt_id_list>

<assignment_stmt>
<return_stmt>

// Structure
<if>
<else_if>
<else_if_list>
<else>

<is_list>
<is>
<default>

// Expressions
<exp>
<exp1>
<exp2>
<exp3>
<exp4>
<exp5>
<exp6>
<exp7>
<exp8>
<exp9>
<exp10>
<exp11>
<exp12>
<exp13>

<type>
<type_primitive>
<modifier_list>

<int_literal>
<literal>
<left_value>
<right_value>

// Operators
<op_comp>
<op_unary_right_mutable>
<op_unary_left>
<op_unary_left_mutable>
<op_bitwise>
<op_arit_low>
<op_arit_high>
<op_assignment>

#Grammar
// Global scope
<global> ::= <global_stmt> <global> | <global_stmt>;
<global_stmt> ::= <declaration_stmt> END | <assignment_stmt> END | <function>;

// Scopes and functions
<scope> ::= LSC RSC | LSC <statement_list> RSC;
<function> ::= <function_prototype> #88 #84 <scope> #58;
<function_prototype> ::= <type> ID #82 LSP RSP | <type> ID #82 LSP <function_prototype_argument_list> RSP;
<function_prototype_argument_list> ::= <type> ID #83 COMMA <function_prototype_argument_list> | <type> ID #83;

<function_call> ::= ID #85 LSP RSP #87 | ID #85 LSP <function_call_argument_list> RSP #87 | PRINT LSP <exp> RSP #90 | INPUT LSP RSP #91;
<function_call_argument_list> ::= <exp> #86 COMMA <function_call_argument_list> | <exp> #86;

// Statements
<statement_list> ::= <statement> <statement_list> | <statement>;
<statement> ::= <if_stmt> | <while_stmt> | <do_while_stmt> END | <for_stmt> | <assignment_stmt> END | <declaration_stmt> END | <return_stmt> END | <when_stmt> | <exp> #108 END;

<if_stmt> ::= <if> #104 | <if> <else> #104 | <if> <else_if_list> #104 | <if> <else_if_list> <else> #104;
<while_stmt> ::= WHILE #92 LSP <exp> #76 #93 RSP #57 <scope> #94 #58;
<do_while_stmt> ::= DO #95 #49 <scope> #58 WHILE LSP <exp> #96 #77 RSP;

<for_stmt> ::= FOR #57 LSP <for_left> END #97 <exp> #78 #98 END #105 <exp> #106 RSP <scope> #107 #99 #58;
<for_left> ::= <exp> | <declaration_stmt> | <assignment_stmt>;

<when_stmt> ::= WHEN LSP <exp> #79 RSP LSC <is_list> RSC #81;

<declaration_stmt> ::= <type> <declaration_stmt_id_list> #70;
<declaration_stmt_id_list> ::= ID #69 COMMA <declaration_stmt_id_list> | ID #69 ASSIGNMENT #46 <exp> #71 COMMA <declaration_stmt_id_list> | ID #69 | ID #69 ASSIGNMENT #46 <exp> #71;

<assignment_stmt> ::= <left_value> #72 <op_assignment> <exp> #71 #73;
<return_stmt> ::= RETURN <exp> #89;

// Structure
<if> ::= IF LSP <exp> #74 #100 RSP #57 <scope> #101 #58;
<else_if_list> ::= <else_if> <else_if_list> | <else_if>;
<else_if> ::= ELSEIF LSP <exp> #102 #75 RSP #57 <scope> #103 #58;
<else> ::= ELSE #57 <scope> #58;

<is_list> ::= <is> <is_list> | <default> | <is>;
<is> ::= IS LSP <exp> #80 RSP <scope>;
<default> ::= DEFAULT <scope>;

// Expressions
<exp>   ::= <exp> OR #21 <exp1> #10 | <exp1>;
<exp1>  ::= <exp1> AND #22 <exp2> #11 | <exp2>;
<exp2>  ::= <exp2> BIT_OR #23 <exp3> #12 | <exp3>; 
<exp3>  ::= <exp3> BIT_XOR #24 <exp4> #13 | <exp4>;
<exp4>  ::= <exp4> BIT_AND #25 <exp5> #14 | <exp5>;
<exp5>  ::= <exp5> <op_comp> <exp6> #15 | <exp6>;
<exp6>  ::= <exp6> <op_bitwise> <exp7> #16 | <exp7>;
<exp7>  ::= <exp7> <op_arit_low> <exp8> #17 | <exp8>;
<exp8>  ::= <exp8> <op_arit_high> <exp9> #18 | <exp9>;
<exp9>  ::= <left_value> <op_unary_right_mutable> #19 | <exp10>;
<exp10> ::= <op_unary_left> <left_value> #9 #20 | <exp11>;
<exp11> ::= <op_unary_left_mutable> <left_value> #20 | <exp12>;
<exp12> ::= <op_unary_left> <right_value> #20 | <exp13>;
<exp13> ::= <left_value> #9 | <right_value>;

<type> ::= <modifier_list> <type_primitive> | <modifier_list> <type_primitive> LSB <int_literal> #68 RSB;
<type_primitive> ::= VAR_INT #61 | VAR_FLOAT #62 | VAR_DOUBLE #63 | VAR_STRING #64 | VAR_CHAR #65 | VAR_BOOLEAN #66 | VAR_VOID #67;
<modifier_list> ::= CONST #60 | î;

<int_literal> ::= INT_DEC | INT_HEX | INT_BIN;
<literal> ::= <int_literal> #1 | FLOAT #2 | STRING #3 | CHAR #4 | BOOLEAN #5;
<left_value> ::= ID #6 | ID #7 LSB <exp> #8 RSB;
<right_value> ::= <literal> | <function_call> | LSP <exp> RSP;

// Operators
<op_comp> ::= GREATER #26 | SMALLER #27 | GREATER_EQ #28 | SMALLER_EQ #29 | EQ #30 | DIF #31;
<op_bitwise> ::= BIT_LS #32 | BIT_RS #33;
<op_arit_low> ::= PLUS #34 | MINUS #35;
<op_arit_high> ::= MULT #36 | DIV #37 | MOD #38;
<op_unary_right_mutable> ::= INCREMENT #39 | DECREMENT #40;
<op_unary_left> ::= MINUS #41 | BIT_NOT #42 | NOT #43;
<op_unary_left_mutable> ::= INCREMENT #44 | DECREMENT #45;
<op_assignment> ::= ASSIGNMENT #46 | INCREMENT_ASSIGNMENT #47 | DECREMENT_ASSIGNMENT #48 | MULTIPLICATION_ASSIGNMENT #49 | DIVSION_ASSIGNMENT #50 | MOD_ASSIGNMENT #51 | BIT_OR_ASSIGNMENT #52 | BIT_XOR_ASSIGNMENT #53 | BIT_AND_ASSIGNMENT #54 | BIT_LS_ASSIGNMENT #55 | BIT_RS_ASSIGNMENT #56;
